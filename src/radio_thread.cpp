#include <atomic>
#include <cstdbool>
#include <cstdlib>
#include <string>
#include <string_view>
#include <vector>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>
#include <complex>

#include <netinet/ip.h>

#include <liquid/liquid.h>
#include <m17.h>
#include <fftw3.h>

#include "ConsumerProducer.h"
#include "sdrnode.h"
#include "M17Demodulator.hpp"
#include "m17rx.h"
#include "m17tx.h"
#include "radio_thread.h"
#include "config.h"

using namespace std;

static constexpr size_t fft_size = 512;
static constexpr array<float, fft_size> fft_win = /** Kaiser window, beta=8 */
{0.002338830512733327, 0.002640447078431964, 0.0029598152396285676, 0.003297495475884702, 0.003654054765731921,
0.004030066407615408, 0.00442610983400305, 0.004842770418685572, 0.0052806392772984795, 0.005740313061101195,
0.006222393744053723, 0.006727488403236263, 0.007256208992661939, 0.007809172110537765, 0.008386998760034138,
0.008990314103627769, 0.009619747211088247, 0.010275930801183183, 0.010959500977181904, 0.011671096956242558,
0.012411360792772505, 0.013180937095856762, 0.013980472740853976, 0.014810616575264593, 0.015672019118980376,
0.016565332259029616, 0.017491208938936593, 0.018450302842819316, 0.019443268074353537, 0.020470758830736114,
0.0215334290717854, 0.022631932184320337, 0.023766920641965426, 0.024939045660531886, 0.026148956849131,
0.027397301857178667, 0.02868472601745558, 0.030011871985390466, 0.031379379374739, 0.03278788438983394,
0.03423801945458674, 0.0357304128384244, 0.03726568827934863, 0.03884446460430908, 0.040467355347084615,
0.04213496836387127, 0.04384790544677762, 0.04560676193543267, 0.04741212632691399, 0.04926457988420627,
0.051164696243404285, 0.05311304101987689, 0.055110171413609875, 0.05715663581395054, 0.05925297340397719,
0.06139971376471926, 0.0635973764794574, 0.06584647073833283, 0.06814749494349835, 0.07050093631504528,
0.07290727049794091, 0.07536696117021431, 0.07788045965262765, 0.08044820452007313, 0.08307062121493552,
0.08574812166266098, 0.0884811038897755, 0.0912699516445932, 0.09411503402085936, 0.09701670508457019,
0.09997530350421219, 0.10299115218466556, 0.10606455790501237, 0.10919581096049485, 0.11238518480886203,
0.11563293572135035, 0.11893930243853394, 0.12230450583128812, 0.12572874856710103, 0.12921221478197287,
0.13275506975813517, 0.13635745960782664, 0.14001951096335574, 0.14374133067367983, 0.14752300550772923,
0.15136460186470074, 0.15526616549154548, 0.15922772120786755, 0.16324927263845573, 0.16733080195365915,
0.17147226961781944, 0.17567361414596944, 0.17993475186899965, 0.18425557670749765, 0.18863595995445534,
0.19307575006703864, 0.1975747724676101, 0.2021328293541877, 0.20674969952052616, 0.21142513818599074,
0.21615887683540178, 0.2209506230690149, 0.2258000604628011, 0.23070684843918163, 0.23567062214837595,
0.24069099236050345, 0.24576754536858883, 0.2508998429026009, 0.25608742205466056, 0.2613297952155428,
0.2666264500225895, 0.2719768493191536, 0.2773804311256733, 0.28283660862248683, 0.2883447701444786,
0.2939042791876458, 0.2995144744276711, 0.3051746697505764, 0.3108841542955269, 0.31664219250984904,
0.3224480242163206, 0.32830086469278136, 0.33419990476410516, 0.34014431090657543, 0.3461332253646847,
0.35216576628039065, 0.3582410278348335, 0.36435808040252826, 0.37051597071803444, 0.3767137220550906,
0.3829503344182045, 0.38922478474668004, 0.3955360271310443, 0.4018829930418521, 0.40826459157081185,
0.414679709684194, 0.42112721248845675, 0.42760594350803166, 0.43411472497518955, 0.4406523581319143,
0.44721762354369476, 0.4538092814251421, 0.4604260719773302, 0.4670667157367559, 0.47372991393579605,
0.4804143488745475, 0.48711868430391303, 0.49384156581980454, 0.5005816212683137, 0.5073374611617011,
0.514107679105052, 0.520890852233427, 0.5276855416593424, 0.5344902929304027, 0.5413036364968973,
0.5481240881891771, 0.5549501497046107, 0.5617803091039165, 0.568613041316667, 0.5754468086557419,
0.5822800613405171, 0.589111238028557, 0.5959387663555828, 0.6027610634834702, 0.6095765366560405,
0.6163835837623955, 0.6231805939075357, 0.629965947990006, 0.636738019286308, 0.6434951740418046,
0.6502357720678421, 0.6569581673448165, 0.6636607086308978, 0.6703417400761263, 0.6769996018415865,
0.6836326307233677, 0.6902391607810173, 0.6968175239701649, 0.7033660507790378, 0.709883070868541,
0.7163669137155911, 0.7228159092594003, 0.7292283885503833, 0.7356026844013622, 0.7419371320407665,
0.7482300697674805, 0.7544798396070326, 0.7606847879687764, 0.7668432663037582, 0.7729536317629191,
0.7790142478553103, 0.7850234851059849, 0.7909797217132387, 0.7968813442048465, 0.8027267480929887,
0.8085143385274999, 0.8142425309471361, 0.8199097517284974, 0.8255144388322904, 0.8310550424465893,
0.8365300256267654, 0.8419378649317452, 0.8472770510562788, 0.8525460894588743, 0.8577435009850858,
0.8628678224858186, 0.8679176074303218, 0.87289142651357, 0.8777878682576863, 0.8826055396071054,
0.8873430665171647, 0.8919990945358005, 0.8965722893780522, 0.9010613374930634, 0.9054649466232837,
0.9097818463555647, 0.9140107886638742, 0.9181505484433126, 0.9221999240351787, 0.9261577377427727,
0.930022836337684, 0.933794091556279, 0.9374704005861278, 0.9410506865421083, 0.9445338989319312,
0.9479190141108319, 0.9512050357251911, 0.954390995144839, 0.9574759518838176, 0.9604589940093555,
0.9633392385388609, 0.9661158318247, 0.9687879499265473, 0.9713547989711253, 0.9738156154991294,
0.976169666799137, 0.9784162512283421, 0.9805546985199249, 0.9825843700768966, 0.984504659252255,
0.9863149916153016, 0.9880148252039757, 0.9896036507630662, 0.9910809919681692, 0.9924464056352735,
0.9936994819158611, 0.9948398444774038, 0.9958671506691796, 0.9967810916732913, 0.9975813926408327,
0.9982678128130994, 0.9988401456278081, 0.9992982188102391, 0.9996418944492661, 0.9998710690582375,
0.9999856736206573, 0.9999856736206573, 0.9998710690582375, 0.9996418944492661, 0.9992982188102391,
0.9988401456278081, 0.9982678128130994, 0.9975813926408327, 0.9967810916732913, 0.9958671506691796,
0.9948398444774038, 0.9936994819158611, 0.9924464056352735, 0.9910809919681692, 0.9896036507630662,
0.9880148252039757, 0.9863149916153016, 0.984504659252255, 0.9825843700768966, 0.9805546985199249,
0.9784162512283421, 0.976169666799137, 0.9738156154991294, 0.9713547989711253, 0.9687879499265473,
0.9661158318247, 0.9633392385388609, 0.9604589940093555, 0.9574759518838176, 0.954390995144839,
0.9512050357251911, 0.9479190141108319, 0.9445338989319312, 0.9410506865421083, 0.9374704005861278,
0.933794091556279, 0.930022836337684, 0.9261577377427727, 0.9221999240351787, 0.9181505484433126,
0.9140107886638742, 0.9097818463555647, 0.9054649466232837, 0.9010613374930634, 0.8965722893780522,
0.8919990945358005, 0.8873430665171647, 0.8826055396071054, 0.8777878682576863, 0.87289142651357,
0.8679176074303218, 0.8628678224858186, 0.8577435009850858, 0.8525460894588743, 0.8472770510562788,
0.8419378649317452, 0.8365300256267654, 0.8310550424465893, 0.8255144388322904, 0.8199097517284974,
0.8142425309471361, 0.8085143385274999, 0.8027267480929887, 0.7968813442048465, 0.7909797217132387,
0.7850234851059849, 0.7790142478553103, 0.7729536317629191, 0.7668432663037582, 0.7606847879687764,
0.7544798396070326, 0.7482300697674805, 0.7419371320407665, 0.7356026844013622, 0.7292283885503833,
0.7228159092594003, 0.7163669137155911, 0.709883070868541, 0.7033660507790378, 0.6968175239701649,
0.6902391607810173, 0.6836326307233677, 0.6769996018415865, 0.6703417400761263, 0.6636607086308978,
0.6569581673448165, 0.6502357720678421, 0.6434951740418046, 0.636738019286308, 0.629965947990006,
0.6231805939075357, 0.6163835837623955, 0.6095765366560405, 0.6027610634834702, 0.5959387663555828,
0.589111238028557, 0.5822800613405171, 0.5754468086557419, 0.568613041316667, 0.5617803091039165,
0.5549501497046107, 0.5481240881891771, 0.5413036364968973, 0.5344902929304027, 0.5276855416593424,
0.520890852233427, 0.514107679105052, 0.5073374611617011, 0.5005816212683137, 0.49384156581980454,
0.48711868430391303, 0.4804143488745475, 0.47372991393579605, 0.4670667157367559, 0.4604260719773302,
0.4538092814251421, 0.44721762354369476, 0.4406523581319143, 0.43411472497518955, 0.42760594350803166,
0.42112721248845675, 0.414679709684194, 0.40826459157081185, 0.4018829930418521, 0.3955360271310443,
0.38922478474668004, 0.3829503344182045, 0.3767137220550906, 0.37051597071803444, 0.36435808040252826,
0.3582410278348335, 0.35216576628039065, 0.3461332253646847, 0.34014431090657543, 0.33419990476410516,
0.32830086469278136, 0.3224480242163206, 0.31664219250984904, 0.3108841542955269, 0.3051746697505764,
0.2995144744276711, 0.2939042791876458, 0.2883447701444786, 0.28283660862248683, 0.2773804311256733,
0.2719768493191536, 0.2666264500225895, 0.2613297952155428, 0.25608742205466056, 0.2508998429026009,
0.24576754536858883, 0.24069099236050345, 0.23567062214837595, 0.23070684843918163, 0.2258000604628011,
0.2209506230690149, 0.21615887683540178, 0.21142513818599074, 0.20674969952052616, 0.2021328293541877,
0.1975747724676101, 0.19307575006703864, 0.18863595995445534, 0.18425557670749765, 0.17993475186899965,
0.17567361414596944, 0.17147226961781944, 0.16733080195365915, 0.16324927263845573, 0.15922772120786755,
0.15526616549154548, 0.15136460186470074, 0.14752300550772923, 0.14374133067367983, 0.14001951096335574,
0.13635745960782664, 0.13275506975813517, 0.12921221478197287, 0.12572874856710103, 0.12230450583128812,
0.11893930243853394, 0.11563293572135035, 0.11238518480886203, 0.10919581096049485, 0.10606455790501237,
0.10299115218466556, 0.09997530350421219, 0.09701670508457019, 0.09411503402085936, 0.0912699516445932,
0.0884811038897755, 0.08574812166266098, 0.08307062121493552, 0.08044820452007313, 0.07788045965262765,
0.07536696117021431, 0.07290727049794091, 0.07050093631504528, 0.06814749494349835, 0.06584647073833283,
0.0635973764794574, 0.06139971376471926, 0.05925297340397719, 0.05715663581395054, 0.055110171413609875,
0.05311304101987689, 0.051164696243404285, 0.04926457988420627, 0.04741212632691399, 0.04560676193543267,
0.04384790544677762, 0.04213496836387127, 0.040467355347084615, 0.03884446460430908, 0.03726568827934863,
0.0357304128384244, 0.03423801945458674, 0.03278788438983394, 0.031379379374739, 0.030011871985390466,
0.02868472601745558, 0.027397301857178667, 0.026148956849131, 0.024939045660531886, 0.023766920641965426,
0.022631932184320337, 0.0215334290717854, 0.020470758830736114, 0.019443268074353537, 0.018450302842819316,
0.017491208938936593, 0.016565332259029616, 0.015672019118980376, 0.014810616575264593, 0.013980472740853976,
0.013180937095856762, 0.012411360792772505, 0.011671096956242558, 0.010959500977181904, 0.010275930801183183,
0.009619747211088247, 0.008990314103627769, 0.008386998760034138, 0.007809172110537765, 0.007256208992661939,
0.006727488403236263, 0.006222393744053723, 0.005740313061101195, 0.0052806392772984795, 0.004842770418685572,
0.00442610983400305, 0.004030066407615408, 0.003654054765731921, 0.003297495475884702, 0.0029598152396285676,
0.002640447078431964, 0.002338830512733327};

void radio_simplex::operator()(atomic_bool &running, const config &cfg,
                    ConsumerProducerQueue<shared_ptr<m17tx>> &to_radio,
                    ConsumerProducerQueue<shared_ptr<m17rx>> &from_radio)
{
    radio_thread_cfg radio_cfg;
    cfg.getRadioConfig(radio_cfg);

    // Initialize frequency modulator / demodulator
    fmod = freqmod_create(radio_cfg.k);
    fdem = freqdem_create(radio_cfg.k);
    // For now, this threads gets packets from the network and display them

    shared_ptr<m17tx> packet;

    // Allocations
    // Allocate the RX samples with fftw so that it is aligned for SIMD
    float *rx_samples = reinterpret_cast<float*>(fftwf_alloc_complex(block_size));
    array<float, 2*block_size>  *tx_samples     = new array<float, 2*block_size>();
    array<float, block_size>    *rx_baseband    = new array<float, block_size>();

    // FFT: we only compute the FFT of the first 512 points
    constexpr size_t fft_N = 512;
    fftwf_complex *rx_samples_fft = reinterpret_cast<fftwf_complex *>(fftwf_alloc_complex(512));
    fftwf_plan fft_plan = fftwf_plan_dft_1d(fft_N, reinterpret_cast<fftwf_complex*>(rx_samples), rx_samples_fft, FFTW_FORWARD, FFTW_MEASURE);

    // M17 Demodulator
    M17::M17Demodulator demodulator;
    demodulator.init();

    // Create and initialize the radio
    sdrnode radio = sdrnode(radio_cfg.rx_freq, radio_cfg.tx_freq, radio_cfg.ppm);
    radio.switch_rx();

    bool channel_bsy = true;
    while(running)
    {
        // While the channel is busy or while there is nothing to send
        // We keep receiving and (attempting to) demodulate
        shared_ptr<m17rx> rx_packet = make_shared<m17rx>();
        while(running && (to_radio.isEmpty() || channel_bsy))
        {
            int read = radio.receive(rx_samples, block_size);

            // Frequency demodulation
            freqdem_demodulate_block(fdem, reinterpret_cast<liquid_float_complex *>(rx_samples),
                                     read, rx_baseband->data());

            // Use OpenRTX demodulator
            bool new_frame = demodulator.update(rx_baseband->data(), read);

            if(new_frame)
            {
                rx_packet->add_frame(demodulator.getFrame());

                if(rx_packet->is_error())
                {
                    // If the packet is in error state, discard it
                    rx_packet = make_shared<m17rx>();
                }
                else if(rx_packet->is_complete())
                {
                    // If this frame completes the packet, push it to the output queue
                    from_radio.add(rx_packet);
                    rx_packet = make_shared<m17rx>();
                }
            }

            if(!demodulator.isLocked())
            {
                // Apply window
                for(size_t i = 0; i < fft_size; i++)
                {
                    rx_samples[i] *= fft_win[i];
                }

                fftwf_execute(fft_plan);

                // Re-use rx_samples to store the module of the array
                complex<float> *in = reinterpret_cast<complex<float> *>(rx_samples_fft);
                float *out = reinterpret_cast<float *>(rx_samples);
                for(size_t i = 0; i < 512; i++)
                {
                    out[i] = abs(in[i]);
                }

                float chan = 0, noise = 0;
                for(size_t i = 0; i < 25; i++)
                {
                    chan += out[i];
                }
                for(size_t i = 512-25; i < 512; i++)
                {
                    chan += out[i];
                }

                for(size_t i = 25; i < 512-25; i++)
                {
                    noise += out[i];
                }

                chan /= 50;
                noise /= (512-50);

                // Check if there is more energy in the channel than elsewhere in the spectrum
                if(chan >= 10*noise)
                {
                    // Channel is busy
                    if(!channel_bsy)
                    {
                        cout << "Channel now busy" << endl;
                    }
                    channel_bsy = true;
                }
                else
                {
                    // Channel is free
                    if(channel_bsy)
                    {
                        cout << "Channel now free" << endl;
                    }
                    channel_bsy = false;
                }

            }

            // If demodulator synced, channel is busy.
            // If demodulator is unsynced, check if channel busy?
        }

        while(running && (!to_radio.isEmpty()))
        {
            int ret = to_radio.consume(packet);
            if(ret < 0)
                break;

            cout << "Received packet for radio." << endl;
            do
            {
                vector<float> tx_baseband = packet->get_baseband_samples(block_size);
                freqmod_modulate_block(fmod, tx_baseband.data(), tx_baseband.size(), reinterpret_cast<liquid_float_complex*>(tx_samples->data()));
                radio.transmit(tx_samples->data(), tx_samples->size());
            }
            while(running && (packet->baseband_samples_left() > 0));
        }
    }

    fftwf_destroy_plan(fft_plan);
    fftwf_free(rx_samples);
    fftwf_free(rx_samples_fft);
    fftwf_cleanup();
    delete(rx_baseband);
    delete(tx_samples);

    freqmod_destroy(fmod);
    freqdem_destroy(fdem);
}